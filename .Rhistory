library(tidyverse)
crime = read.csv("Crime data.csv", stringsAsFactors = FALSE)
crime = read.csv("Crime data.csv", stringsAsFactors = FALSE)
# Load the necessary library
library(dplyr)
# Calculate the total count of crimes for each area
crime_counts_per_area <- crime %>%
group_by(AREA.NAME) %>%
summarise(Total_Crimes = n(), .groups = 'drop') %>%
arrange(desc(Total_Crimes))  # Sort by the number of crimes, highest first
crime = read.csv("Crime data.csv", stringsAsFactors = FALSE)
head(crime)
summary(crime)
cat("Number of rows:", nrow(crime), "\n")
cat("Number of columns:", ncol(crime), "\n")
colnames(crime)
crime = crime %>%
select(
-DR_NO,
-AREA,
-`TIME.OCC`,
-`Part.1.2`,    # Drop Part.1 column
-Mocodes,       # Drop Mocodes column
-Status,        # Drop Status column
-`Crm.Cd.2`,    # Drop Crm.Cd.2 column
-`Crm.Cd.3`,    # Drop Crm.Cd.3 column
-`Crm.Cd.4`,    # Drop Crm.Cd.4 column
-`Cross.Street` # Drop Cross.Street column
)
sum(is.na(crime))
crime = na.omit(crime)
crime = crime %>% distinct()
convert_dates <- function(date_column) {
dates <- as.Date(date_column, format = "%m/%d/%Y %H:%M")
if (any(is.na(dates))) {
dates[is.na(dates)] <- as.Date(date_column[is.na(dates)], format = "%m/%d/%Y %I:%M %p")
}
return(dates)
}
crime$Date.Rptd <- convert_dates(crime$Date.Rptd)
crime$DATE.OCC <- convert_dates(crime$DATE.OCC)
# Verify the date conversion
summary(crime$Date.Rptd)
summary(crime$DATE.OCC)
# Load the necessary library
library(dplyr)
# Calculate the total count of crimes for each area
crime_counts_per_area <- crime %>%
group_by(AREA.NAME) %>%
summarise(Total_Crimes = n(), .groups = 'drop') %>%
arrange(desc(Total_Crimes))  # Sort by the number of crimes, highest first
# Displaying the result
print(crime_counts_per_area)
# Write the dataframe to an Excel file
write.xlsx(crime_counts_per_area, file = "CrimeCountsPerArea.xlsx", sheetName = "Crime Counts", overwrite = TRUE)
# Install openxlsx if not already installed
if (!require(openxlsx)) {
install.packages("openxlsx", dependencies = TRUE)
}
library(openxlsx)
# Load dplyr for data manipulation
library(dplyr)
# Calculate the total count of crimes for each area
crime_counts_per_area <- crime %>%
group_by(AREA.NAME) %>%
summarise(Total_Crimes = n(), .groups = 'drop') %>%
arrange(desc(Total_Crimes))  # Sort by the number of crimes, highest first
# Displaying the result
print(crime_counts_per_area)
# Write the dataframe to an Excel file
write.xlsx(crime_counts_per_area, file = "CrimeCountsPerArea.xlsx", sheetName = "Crime Counts", overwrite = TRUE)
# Load necessary library
library(dplyr)
# Aggregate crime data by victim's sex and age with specified filters
filtered_crime_table <- crime %>%
filter(Vict.Age >= 20 & Vict.Age <= 30, Vict.Sex %in% c("M", "F")) %>%
group_by(Vict.Sex, Vict.Age) %>%
summarise(Total_Crimes = n(), .groups = 'drop') %>%
arrange(Vict.Sex, Vict.Age)
# Displaying the aggregated data
print(filtered_crime_table)
# Write the dataframe to an Excel file
write.xlsx(filtered_crime_table, file = "Filtered_Crime_Table.xlsx", sheetName = "Filtered Crime", overwrite = TRUE)
# Load necessary libraries
library(dplyr)
library(ggplot2)
# Calculate the total crimes to use for normalization if needed
total_crimes <- sum(crime$Vict.Sex %in% c("M", "F"))
# Aggregate crime data by victim's sex and normalize by the total crimes
crime_data_by_sex <- crime %>%
filter(Vict.Sex %in% c("M", "F")) %>%
group_by(Vict.Sex) %>%
summarise(Total_Crimes = n(), .groups = 'drop') %>%
mutate(Scaled_Crimes = Total_Crimes / total_crimes * 100)  # Scale as percentage of total crimes
# Plotting the data with scaled y-axis
ggplot(crime_data_by_sex, aes(x = Vict.Sex, y = Scaled_Crimes, fill = Vict.Sex)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Total Crime Counts by Victim Sex (Scaled as % of Total)",
x = "Victim Sex",
y = "Percentage of Total Crimes (%)") +
scale_fill_manual(values = c("M" = "blue", "F" = "pink")) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 0),
legend.title = element_blank())
# Load necessary library
library(ggplot2)
library(dplyr)
# Convert DATE.OCC to Date format for easier handling
crime$DATE.OCC <- as.Date(crime$DATE.OCC, "%d/%m/%Y")
# Aggregate data by year
annual_crime_counts <- crime %>%
mutate(Year = format(DATE.OCC, "%Y")) %>%
group_by(Year) %>%
summarise(Total_Crimes = n())
# Plotting the trend
ggplot(annual_crime_counts, aes(x = Year, y = Total_Crimes)) +
geom_line(group=1, color="blue") +
geom_point(color="red") +
labs(title = "Annual Crime Trends in Los Angeles", x = "Year", y = "Total Number of Crimes")
# Load necessary library
library(dplyr)
library(ggplot2)
library(stringr) # for str_detect
# Filter the dataset for crime types that include "VEHICLE"
vehicle_crime_data <- crime %>%
filter(str_detect(Crm.Cd.Desc, "VEHICLE")) %>%
mutate(Year.OCC = format(as.Date(DATE.OCC, format="%d/%m/%Y"), "%Y")) %>%
group_by(Year.OCC, Crm.Cd.Desc) %>%
summarise(Crime_Count = n(), .groups = 'drop') %>%
filter(Crime_Count > 50) # Filtering to keep the plot readable
# Plotting the filtered data
ggplot(vehicle_crime_data, aes(x = Year.OCC, y = Crime_Count, fill = Crm.Cd.Desc)) +
geom_bar(stat = "identity", position = position_dodge()) +
labs(title = "Comparison of Vehicle-Related Crime Types Over the Years", x = "Year", y = "Count of Crimes") +
theme_minimal() +
theme(legend.position = "bottom")
# Load necessary library
library(dplyr)
library(ggplot2)
library(stringr) # for str_detect
# Filter the dataset for crime types that include "KIDNAPPING"
kidnapping_data <- crime %>%
filter(str_detect(Crm.Cd.Desc, "KIDNAPPING")) %>%
mutate(Year.OCC = format(as.Date(DATE.OCC, format="%d/%m/%Y"), "%Y")) %>%
group_by(Year.OCC, Crm.Cd.Desc) %>%
summarise(Crime_Count = n(), .groups = 'drop') %>%
filter(Crime_Count > 50) # Filtering to keep the plot readable
# Plotting the filtered data
ggplot(kidnapping_data, aes(x = Year.OCC, y = Crime_Count, fill = Crm.Cd.Desc)) +
geom_bar(stat = "identity", position = position_dodge()) +
labs(title = "Comparison of Kidnapping Crimes Over the Years", x = "Year", y = "Count of Crimes") +
theme_minimal() +
theme(legend.position = "bottom")
# Load necessary libraries
library(dplyr)
library(ggplot2)
# Aggregate data by Premis.Desc
crime_by_premise <- crime %>%
group_by(Premis.Desc) %>%
summarise(Total_Crimes = n()) %>%
arrange(desc(Total_Crimes))
# Plotting the top 10 premises for crimes
ggplot(crime_by_premise[1:10, ], aes(x = reorder(Premis.Desc, -Total_Crimes), y = Total_Crimes)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(title = "Top 10 Crime Locations by Premise", x = "Type of Premise", y = "Number of Crimes") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
# Filter dataset to exclude extreme or missing age values
filtered_data <- crime %>%
filter(Vict.Age > 0 & Vict.Age < 100)
# Plotting victim age by crime type (top 5 common crimes)
top_crimes <- filtered_data %>%
group_by(Crm.Cd.Desc) %>%
summarise(Total = n()) %>%
top_n(5, Total)
# Visualizing Age distribution for top crimes
filtered_data %>%
filter(Crm.Cd.Desc %in% top_crimes$Crm.Cd.Desc) %>%
ggplot(aes(x = Vict.Age, fill = Crm.Cd.Desc)) +
geom_histogram(bins = 30, position = "dodge") +
labs(title = "Distribution of Victim Age by Crime Type", x = "Victim Age", y = "Frequency") +
theme_minimal()
summary(crime)
write.xlsx(summary, file = "SummaryOfCrimeData.xlsx", sheetName = "Summary", overwrite = TRUE)
